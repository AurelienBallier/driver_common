#! /usr/bin/env python
#***********************************************************
#* Software License Agreement (BSD License)
#*
#*  Copyright (c) 2009, Willow Garage, Inc.
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

NAME='dynparam'

import roslib; roslib.load_manifest('dynamic_reconfigure')
import rospy
import py_dynamic_reconfigure as dynamic_reconfigure
import sys
from optparse import OptionParser

def print_usage():
    print """dynparam is a command-line tool for getting, setting, and
    deleting parameters of a dynamically configurable node.

    Commands:
    \tdynparam set\tconfigure node
    \tdynparam paramset\tcopy dynparam parameters to node
    \tdynparam get\tget node configuration
    \tdynparam load\tload configuration from file
    \tdynparam dump\tdump configuration to file
    \tdynparam list\tlist configurable nodes
    """
    sys.exit(0)

def get_params(node):
    client = dynamic_reconfigure.DynamicReconfigureClient(node)
    return client.get_configuration()

def set_params(node, params):
    client = dynamic_reconfigure.DynamicReconfigureClient(node)
    config = client.update_configuration(params)

def do_list():
    list = dynamic_reconfigure.find_reconfigure_services()
    for s in list:
        print s

def do_paramset():
    parser = OptionParser(usage="usage: %prog paramset [options] node", prog=NAME)
    options, args = parser.parse_args(myargv[2:])
    
    if len(args) == 0:
        parser.error("invalid arguments. Please specify a node name")
    elif len(args) == 1:
        node = args[0]
    else:
        parser.error("too many arguments")
    
    params = rospy.get_param("~")
    set_params(node, params)

def do_set():
    print "Not implemented yet."

def do_get():
    parser = OptionParser(usage="usage: %prog get [options] node", prog=NAME)
    options, args = parser.parse_args(myargv[2:])

    if len(args) == 0:
        parser.error("invalid arguments. Please specify a node name")
    elif len(args) == 1:
        node = args[0]
    else:
        parser.error("too many arguments")

    print get_params(node) 

def do_dump():
    parser = OptionParser(usage="usage: %prog dump [options] node file", prog=NAME)
    options, args = parser.parse_args(myargv[2:])

    if len(args) == 0:
        parser.error("invalid arguments. Please specify a node name")
    elif len(args) == 1:
        parser.error("invalid arguments. Please specify an output file")
    elif len(args) == 2:
        node = args[0]
        file = args[1]
    else:
        parser.error("too many arguments")

    f = open(file, 'w')
    print >> f, get_params(node)
    f.close()

def do_load():
    parser = OptionParser(usage="usage: %prog load [options] node file", prog=NAME)
    options, args = parser.parse_args(myargv[2:])

    if len(args) == 0:
        parser.error("invalid arguments. Please specify a node name")
    elif len(args) == 1:
        parser.error("invalid arguments. Please specify an output file")
    elif len(args) == 2:
        node = args[0]
        file = args[1]
    else:
        parser.error("too many arguments")

    f = open(file, 'r')
    set_params(node, eval(f.read()))
    f.close()

if __name__ == '__main__':
    myargv = rospy.myargv()
    if len(myargv) == 1:
      print_usage()
    rospy.init_node("dynparam", anonymous=True)
    if myargv[1] == "list":
      do_list()
    if myargv[1] == "paramset":
      do_paramset()
    if myargv[1] == "set":
      do_set()
    if myargv[1] == "get":
      do_get()
    if myargv[1] == "load":
      do_load()
    if myargv[1] == "dump":
      do_dump()
