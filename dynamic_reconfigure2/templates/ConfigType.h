#line ${linenum} "${filename}"
// *********************************************************
// 
// File autogenerated for the ${pkgname} package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRE${name}Config, INDIRE${name}Config,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRA${name}Config, STRI${name}Config
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __${uname}CONFIG_H__
#define __${uname}CONFIG_H__

#include <dynamic_reconfigure/reconfigurator.h>
#include <limits>

namespace ${pkgname}
{
  class ${name}Config
  {
  private:
    class AbstractParameterDescription
    {
    public:
      AbstractParameterDescription(std::string name, uint8_t type, int level, 
          std::string description, std::string edit_method) :
        name_(name), type_(type), level_(level), 
        description_(description), edit_method_(edit_method)
      {}

      std::string name_;
      uint8_t type_;
      int level_;
      std::string description_;
      std::string edit_method_;
      
      virtual void clamp(${name}Config &config) = 0;
      virtual void level(int &level, ${name}Config &config1, ${name}Config &config2) = 0;
    };
    
    template <class T>
    class ParameterDescription : public AbstractParameterDescription
    {
    public:
      ParameterDescription(std::string name, uint8_t type, int level, 
          std::string description, std::string edit_method, T ${name}Config::* field_) :
        AbstractParameterDescription(name, type, level, description, edit_method),
        field_(field)
      {}

      T ${name}Config::* field_;

      void clamp(${name}Config &config, const ${name}Config &max, const ${name}Config &min) const
      {
        if (config->*field_ > max->*field_)
          config->*field_ = max->*field_;
        
        if (config->*field_ < min->*field_)
          config->*field_ = min->*field_;
      }

      void level(int &level, const ${name}Config &config1, const ${name}Config &config2)
      {
        if (config1->*field_ != config2->*field_)
          *level |= level_;
      }

      void fromServer(ros::NodeHandle &nh, ${name}Config &config)
      {
        nh.getParam(name_, config->*field_);
      }

      void toServer(ros::NodeHandle &nh, const ${name}Config &config)
      {
        nh.setParam(name_, config->*field_);
      }

      bool fromMsg(dynamic_reconfigure2::ParameterSet &msg, ${name}Config &config)
      {
        return dynamic_reconfigure::ParameterSetTools::getParameter(name_, config_->*field);
      }

      void toMsg(dynamic_reconfigure2::ParameterSet &msg, ${name}Config &config)
      {
        return dynamic_reconfigure::ParameterSetTools::AppendParameter(name_, config_->*field);
      }
    };

    int num_parameters_ = ${num_parameters};
    AbstractParameterDescription<${name}Config> *parameters_[] = {
    };
    ${name}Config __max__ = {
${maxes}
#line ${linenum} "${filename}"
    };
    ${name}Config __min__ = {
${mins}
#line ${linenum} "${filename}"
    };
    ${name}Config __default__ = {
${defaults}
#line ${linenum} "${filename}"
    };

$members
#line ${linenum} "${filename}"

    bool __fromMsg__(dynamic_reconfigure2::ParameterSet &msg)
    {
      int count = 0;
      for (int i = 0; i < __.num_parameters_; i++)
        if (__.parameters_[i]->getParameter(msg, *this))
          count++;
      if (count != dynamic_reconfigure::ParameterSetTools::size(msg))
      // @todo Check that there are no duplicates.
    }

    void __toMsg__(dynamic_reconfigure2::ParameterSet &msg)
    {
      for (int i = 0; i < __.num_parameters_; i++)
        __.parameters_[i]->appendParameter(msg, *this);
    }
    
    bool __toServer__(const ros::NodeHandle &nh = ros::NodeHandle("~"))
    {
      for (int i = 0; i < __.num_parameters_; i++)
        __.parameters_[i]->toServer(ros::NodeHandle nh);
    }

    bool __fromServer__(const ros::NodeHandle &nh = ros::NodeHandle("~"))
    {
      for (int i = 0; i < __.num_parameters_; i++)
        __.parameters_[i]->fromServer(ros::NodeHandle nh);
    }
    
    void __clamp__()
    {
      for (int i = 0; i < __.num_parameters_; i++)
        __.parameters_[i]->clamp(*this, __.max_, __.min_)
    }

    int __level__(const ${name}Config &config)
    {
      int level = 0;
      for (${name}Config.iterator i = config.parameters_.start(); i != config.parameters_.end(); i++)
        __.parameters_[i]->level(level, config, *this);
      return level;
    }
  };
}

#endif // __${uname}RECONFIGURATOR_H__
